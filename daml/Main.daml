module Main where

import Daml.Script

type AuthorId = ContractId Author
template Author
  with
    username: Party
    displayName: Text
    email: Text
  where
    signatory username

    key username : Party
    maintainer key

    nonconsuming choice CreateTodo: TodoId
      with
        id: Text
        title: Text
      controller this.username
      do
        currentTime <- getTime
        create Todo with author = this, isCompleted = False, createdAt = currentTime, updatedAt = currentTime, ..

type TodoId = ContractId Todo
type TodoUId = (Party, Text)
template Todo
  with
    id: Text
    author: Author
    title: Text
    isCompleted: Bool
    createdAt: Time
    updatedAt: Time
  where
    ensure title /= ""
    signatory author.username

    key (author.username, id): TodoUId
    maintainer key._1

    choice UpdateAuthor: TransferAuthorshipProposalId
      with
        newAuthor: Author
      controller author.username
      do
        currentTime <- getTime
        create TransferAuthorshipProposal
          with
            todo = this
            newAuthor

    choice UpdateTodoTitle : TodoId
      with
        newTitle: Text
      controller author.username
      do
        currentTime <- getTime
        create this with title = newTitle, updatedAt = currentTime

    choice CompleteTodo : TodoId
      controller author.username
      do
        currentTime <- getTime
        create this with isCompleted = True, updatedAt = currentTime

type TransferAuthorshipProposalId = ContractId TransferAuthorshipProposal
template TransferAuthorshipProposal
  with
    todo: Todo
    newAuthor: Author
  where
    signatory todo.author.username
    observer newAuthor.username

    choice AcceptAuthorship: TodoId
      controller newAuthor.username
      do
        create todo with author = newAuthor

    choice RejectAuthorship: TodoId
      controller todo.author.username
      do create todo

todo_script = script do
  currentTime <- getTime
  -- Alice username
  alice <- allocateParty "Alice"
  -- Create Author Alice
  aliceAuthorId <- submit alice do
    createCmd Author with
      username = alice
      displayName = "Alice"
      email = "alice@wonderland.com"
  -- Alice creates a TODO
  submit alice do
    exerciseCmd aliceAuthorId CreateTodo with id = "1", title = "create a Daml app"
  -- Alice creates an idential TODO with the same id, Expected failure due to unique key violation
  submitMustFail alice do
    exerciseCmd aliceAuthorId CreateTodo with id = "1", title = "This TODO should fail"
  -- Alice creates a second TODO
  submit alice do
    exerciseCmd aliceAuthorId CreateTodo with id = "2", title = "Very important TODO"

  Some (aliceFirstTodo, _) <- queryContractKey @Todo alice (alice, "1")

  aliceFirstTodo <- submit alice do
    exerciseCmd aliceFirstTodo UpdateTodoTitle with newTitle = "Create a TODO App using Daml"

  submit alice do
    exerciseCmd aliceFirstTodo CompleteTodo

  -- Bob username
  bob <- allocateParty "Bob"
  -- Create Author Alice
  bobAuthorId <- submit bob do
    createCmd Author with
      username = bob
      displayName = "Bob"
      email = "bob@squarepants.com"

  Some bobAuthor <- queryContractId @Author bob (bobAuthorId)
  Some (secondTodo, _) <- queryContractKey @Todo alice (alice, "2")

  Some aliceAuthor <- queryContractId @Author alice (aliceAuthorId)

  proposal <- submit alice do
    exerciseCmd secondTodo UpdateAuthor
      with newAuthor = bobAuthor

  secondTodo <- submit bob do
    exerciseCmd proposal AcceptAuthorship

  submit bob do
    exerciseCmd secondTodo CompleteTodo
